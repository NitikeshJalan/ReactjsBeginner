1) What is React? 

Ans - React is an open source front end JS library which is used for binding user interfaces
like SPA's. 
Created by Jordan Walke, and was first deployed in 2011 

Note: 

Difference between Framework and Library?

Library
1) It is a set of reusable functions 
2) We can call a function in the library and then the control is returned.
3) It can be easily incorporated into an exisiting project and add functionaility
4) Program linking and binding process are some of the core features of a library.

Example: React , Jquery

Framework
1) It is a piece of code that actually dictates the archietechture of the project
2) In framework we never call a function instead the framework calls our code.
3) It cannot be added seamlessly into an already exisiting project
4) Build and deploy applications are best suited for a framework characteristic

Example: Angular

2) Features of React?

- Its uses VirtualDOM instead of RealDOM considering the fact that RealDOM manipulations are expensive.
- Supports server side rendering 
- Follows unidirectional data flow or data binding
- Uses reusable/composable UI components to develop the view.

3) What is JSX? 

Ans - JSX or JavaScript XML is a XML like syntax extension to ECMAScript.It provides syntactic sugar 
for the React.createElement() function giving us expressiveness of JavaScript along with HTML like 
template syntax.

Example:

class App extends React.Component {
    render() {
        return (
            <div>
            <h1>{'Welcome to React'}</h1>
            </div>
        )
    }
}

4) Difference between Element and Component in React ?

Ans - 

An Element is a plain object describing what we want to appear/show on the screen in terms of DOM  
nodes or other components.
Elements can contain other elements in their props.Creating a React element is cheap and once created 
it is never mutated.

const element  = React.createElement(
    'div',
    {id :'login-btn'},
    'Login'
)

will return an object as: 

{
    type : 'div',
    props : {
        children: 'Login',
        id : 'login-btn'
    }
}

render using ReactDOM.render() as:

<div id = 'login-btn'>Login</div>

Components in React can be declared in several ways , it can be a class with a render() or defined as 
a function, in both the ways it takes props as input and returns a JSX tree as output.

const Button = ({onLogin}) => 
<div id = 'login-btn' onClick ={onLogin}>Login</div>

JSX gets transpiled to React.createElement() as :
const Button = ({onLogin}) => React.createElement(
     'div',
    {id :'login-btn', onClick: onLogin},
    'Login'
)

5) how to create Components in React?

Ans - There are 2 possible ways to create a component in React:

i) Function components: Simplest way to create a component which are pure JS functions 
which take props object as the first parameter and return React elements:

function Greeting ({message}) {
    return <h1>{'Hello, ${message}'}</h1>
}

ii) Class Components: Uses ES6 classes to define a component 

class Greeting extends React.Component {
    render() {
        return (
            <h1>{'Hello, ${this.props.message}'}</h1>
        )
    }
}

6) When to use Class Components over Function Components?

Ans - If the component uses state or lifecycle methods then it is preferred to use 
class compponents.
However from React 16.8 ,with addition of hooks: we can use state,lifecycle methods and other features 
in function components as well.
Like Error boundaries feature is still not available in function components.

7) What are Pure components in React ?

Ans - 
React.PureComponent is exactly similar to React.Component except that it handles the
shouldComponentUpdate().
When props or state changes PureComponent will do a shallow comparison on both props and state.
Component on the other hand doesnt compare the current props and state and will rerender the DOM
by default when shouldComponentUpdate() is called. 

8) What is state in React ?

Ans -
State of a component is an object thats holds some useful information that may change over the lifetime 
of the component.

State is used for internal communication inside a component
State is private to the component, it is not accessible outside the component unless the owner component
decides to pass it.

class User extends React.Component {
    constructor(props) {
        super(props)

        this.state = {
            message: 'Test'
        }
    }

    render() {
        return (
            <div>
                <h1>{this.state.message}</h1>
            </div>
        )
    }
}

9) What are props in React?

Ans - 
props are input to the components.
They are either single values or objects with a set of values that are passed to components similar to 
HTML attributes.
They are data passed down from parent to child components.
i) Pass data to our component
ii) Trigger state changes 
iii) Use via this.props.ReactProp (custom name) inside components render().

<Element ReactProp = {'1'} />

this.prop.ReactProp can be used in all components created using React library.

10) Difference bwteeen state and props ?

Ans -
Both props and state are plain JS objects.
While both of them hold information that influences the output of the render() but are different in their 
functionaility.
props are passed to the component similar to function paramters wheres state is managed inside the 
component similar to variables declared within the function.

11) Why we should not update the state directly? 

Ans - If we try to update the state direclty then it wont rerender the component 
this.state.message = 'test';   //Wrong

instead we should use this.setstate() which schedules an update on the component's state object
and then the component re renders
this.setstate({
    message: 'Test'
})

12) What is purpose of the callback function as an argument to setstate() ?

Ans - The callback function is invoked when setState() is finished and the component gets rerendered.
Since it is asynchronous it is used for any post action after updating state.

this.setState({
    message: 'test'
},
() = > console.log('set state done');)

Note: Instead of this callback function we should use the lifecycle hook.

13) Difference between HTML and React event Handling

Ans -

i) In HTML the event name is in lowercase and in camelCase in React

<button onclick = 'test()'>
<button onClick = {test} >

ii) In HTML  we can return false to prevent default behavior, use preventDefault() in React

iii) In HTML we need to add () while calling a function whereas we dont require the same in React.

14) How to bind methods or events in JSX callbacks ?

Ans - 3 possible ways: 

i) Binding in constructor: 

class Foo extends React.Component {
    constructor(props) {
        super(props)
        this.handleClick = this.handleClick.bind(this);
    }

    handleClick() {
        console.log('test');
    }

    render() {
        return <button onClick = {this.handleClick}>Click me</button>
    }
}

ii) public class field syntax: 

handleClick = () => {
    console.log('test');
}

<button onClick={this.handleClick}>{'Click me'}</button>

iii) Arrow functions in callback:

handleClick() {
    console.log('test');
}

render() {
    return (
        <button onClick = {() => this.handleClick()}Click me</button>
    )
}

Note: If the callback is passed as props to child components then those components might do an
extra rerendering.Hence not preferred in those cases.

15) How to pass paramters to an event handler or callback? 

Ans - 

<button onClick = {() => this.handleClick(id)} />

<button onClick = {this.handleClick.bind(this,id)} />

<button onClick = {this.handleClick(id)} />

handleClick = (id) => {
    console.log(id);
}

16) What are synthetic events in React ?

Ans - SyntheticEvent is a cross bowser wrapper around the browser's native event.
Its API is same as the browser's native event including stopPropagation and preventDefault except 
the event works identically across all broswers.

17) What are inline condtional expressions?

Ans - We can use either if statements or ternary operators available with JS to condtionally render
expressions.Also we can embed any expressions in JSX by wrapping up them in curly braces.

<h1>Hello</h1>
{
    messages.length && !isLogin?
    <h1>test1</h1>
    :
    <h2>test2</h2>
}

18) What is "key" prop and what is its beneefits in arrays?

Ans - A key is a special string attribute we should include when using array of elements.
key prop helps React identify which items have been changed,added or deleted.

const toDoItems = todos.map((todo) => 
<li key = {todo.id}>{todo.text}</li>
)

If we dont have any unique identity in the array use index: 

const toDoItems = todos.map((todo,index) => 
<li key = {index}>{todo.text}</li>
)

Note: 
- Using index is not recommended as if order elements changes it can have negative performance 
- If list item is extracted as a seperate component then key should be applied on the list component 
instead of <li> item
- Warning message in console if key is not used.

19) What is the use of refs? 

Ans - The ref is used to return a reference of the element.Though they should be avoided but can act 
useful when we need a direct access of the DOM element or an instance of the component.

20) How to create refs? 

Ans - 

21) What are forward refs? 

Ans - 

22) Which is the preferred option in callback refs and findDOMNode() ?

Ans - 

23) Why are String refs legacy? 

Ans - 

24) What is VirtualDOM ?

Ans - The VirtualDOM or VDOM is an in-memory representation of the RealDOM 
The representation of the UI is kept in memory and synced with the real DOM.
Its a step that happens between the render() being called and the display of elements on the scree,
process known as reconciliation.

25) How VirtualDOM works?

Ans - 3 steps

i) Whenever any underlying data changes the entire UI is rerendered in VirtualDOM representation.
ii) The difference bwteeen the previous DOM representation and the new one is calculated.
iii) Once the calculations are done, the RealDOM is updated with only the elements that have changed.

26) Difference between ShadowDOM and VirtualDOM? 

Ans - ShadowDOM is a browser technology designed primarily for scoping varibles and CSS 
in web components.
VirtualDOM is a concept implemeted by libraries to have a in memory representation of the RealDOM
on top of browser API's.

27) What is React Fiber? 

Ans - 


28) Main goal of react Fiber? 

Ans - 

29) What are controlled components?

Ans - A component that controls the input elements within the forms on subsequent user input 
is called a controlled component or every state mutation will have handler function 


handleChange(event) {
    this.setState({
        value: event.target.value.toUpperCase()
    })
}

30) What are uncontrolled components?

Ans - Uncontrolled components are the ones that store their state internally and we query the DOM 
using the ref to find its current value when we need it.
More like traditional HTML form.

class UserProfile extends React.Component {
    constructor(props) {
        super(props)
        this.handleSubmit = this.handleSubmit.bind(this);
        this.input = React.createRef();
    }

    handleSubmit(event) {
        console.log(this.input.current.value);
    }

    render() {
        return (
            <form onSubmit = {this.handleSubmit}>
                <label>
                {'Name:'}
                <input type = 'text' ref = {this.input}>
                </label>
                <input type = 'submit' value = 'Submit'>
            </form>
        )
    }
}

